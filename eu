import pandas as pd
from datetime import datetime

def compute_blg_stock():
    today = pd.to_datetime(datetime.today().date())
    data = {"IT_PULLOUT": []}
    supplyon, pullout = call_data(supplyon_bmw, data)

    supplyon['delivery_date'] = pd.to_datetime(
        supplyon['delivery_date'].replace('Backorder', pd.NaT), errors='coerce')
    supplyon = supplyon.dropna(subset=['delivery_date'])
    supplyon['delivery_quantity'] = pd.to_numeric(supplyon['delivery_quantity'], errors='coerce').fillna(0)

    pullout['con_date'] = pd.to_datetime(pullout['con_date'], errors='coerce')
    pullout['FKIMG'] = pd.to_numeric(pullout['FKIMG'], errors='coerce').fillna(0)

    pullout.loc[
        (pullout['con_date'].notna()) & 
        (pullout['con_date'] < today) & 
        (pullout['RECEP_FLG'] != 'X'), 'RECEP_FLG'
    ] = 'X'

    blg_df = pullout[pullout['RECEP_FLG'] == 'X'].groupby('buyer_article_no', as_index=False)['FKIMG'].sum()
    blg_df = blg_df.rename(columns={'FKIMG': 'total_blg'})

    supplyon_sorted = supplyon.sort_values(['buyer_article_no', 'delivery_date'])
    update_records = []

    for article, group in supplyon_sorted.groupby('buyer_article_no', sort=False):
        group = group.sort_values('delivery_date')
        stock_row = blg_df.loc[blg_df['buyer_article_no'] == article, 'total_blg']
        stock_val = int(stock_row.iloc[0]) if not stock_row.empty else 0

        future_pullout = pullout[
            (pullout['buyer_article_no'] == article) &
            (pullout['RECEP_FLG'] != 'X') &
            (pullout['con_date'] > today)
        ].sort_values('con_date')

        fkimg_list = future_pullout['FKIMG'].tolist()
        con_date_list = future_pullout['con_date'].tolist()
        total_git = int(sum(fkimg_list))

        rows = group[group['delivery_date'] >= today].copy()
        rows = rows.sort_values('delivery_date')

        row_assignments = {}
        assigned_rows = set()
        current_git = total_git

        # Assign FKIMG batches only to rows with delivery_date < con_date
        for fkimg, con_date in zip(fkimg_list, con_date_list):
            eligible_rows = rows[
                (rows['delivery_date'] < con_date) &
                (~rows.index.isin(assigned_rows))
            ]
            for idx in eligible_rows.index:
                row_assignments[idx] = {
                    'git_qty': current_git,
                    'next_git_qty': fkimg,
                    'next_git_wh_date': con_date
                }
                assigned_rows.add(idx)
            current_git -= fkimg

        # Update each row with assigned values
        previous_stock_val = stock_val

        for idx, row in group.iterrows():
            delivery_date = pd.to_datetime(row['delivery_date'], errors='coerce')
            if pd.isna(delivery_date) or delivery_date < today:
                continue

            row_data = row_assignments.get(idx, None)
            if not row_data:
                continue

            git_qty = row_data['git_qty']
            next_git_qty = row_data['next_git_qty']
            next_git_date = row_data['next_git_wh_date']

            supplyon.at[idx, 'blg_warehouse_stock'] = previous_stock_val
            supplyon.at[idx, 'git_qty'] = git_qty
            supplyon.at[idx, 'next_git_wh_qty'] = next_git_qty
            supplyon.at[idx, 'next_git_wh_date'] = next_git_date

            rec = supplyon_bmw.objects.get(pk=row['id'])
            rec.blg_warehouse_stock = max(previous_stock_val, 0)
            rec.git_qty = git_qty
            rec.next_git_wh_qty = next_git_qty
            rec.next_git_wh_date = next_git_date

            latest = bmw_warehouse.objects.filter(buyer_article_no=article).order_by('-entry_date').first()
            rec.warehouse_stock = int(latest.warehouse_qty) if latest else 0

            update_records.append(rec)

            previous_stock_val = int(previous_stock_val + next_git_qty - row['delivery_quantity'])

    if update_records:
        supplyon_bmw.objects.bulk_update(
            update_records,
            ["blg_warehouse_stock", "git_qty", "next_git_wh_qty", "next_git_wh_date", "warehouse_stock"]
        )
        print(f"âœ… Updated {len(update_records)} records successfully.")

# Call the function
compute_blg_stock()
