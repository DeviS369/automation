def compute_git():
    today = pd.to_datetime(datetime.today().date())
    data = {"IT_PULLOUT": []}
    supplyon, pullout = call_data(supplyon_bmw, data)
    supplyon['delivery_date'] = pd.to_datetime(
        supplyon['delivery_date'].replace('Backorder', pd.NaT),
        errors='coerce'
    )
    supplyon = supplyon.dropna(subset=['delivery_date'])
    supplyon['delivery_quantity'] = pd.to_numeric(
        supplyon['delivery_quantity'], errors='coerce'
    ).fillna(0)
    
    pullout['con_date'] = pd.to_datetime(pullout['con_date'], errors='coerce')
    pullout['FKIMG'] = pd.to_numeric(pullout['FKIMG'], errors='coerce').fillna(0)
    
    pullout.loc[
        (pullout['con_date'].notna()) & (pullout['con_date'] < today) & (pullout['RECEP_FLG'] != 'X'),
        'RECEP_FLG'
    ] = 'X'
    
    supplyon_sorted = supplyon.sort_values(['buyer_article_no', 'delivery_date'])
    update_records = []
    
    # Loop through each article
    for article, group in supplyon_sorted.groupby('buyer_article_no', sort=False):
        group = group.sort_values('delivery_date')
        
        # Filter future pullouts for the current article
        future_pullout = pullout[
            (pullout['buyer_article_no'] == article) &
            (pullout['RECEP_FLG'] != 'X') &
            (pullout['con_date'] >= today)
        ].sort_values('con_date')
        
        total_fkimg = future_pullout['FKIMG'].sum()
        future_rows = group[group['delivery_date'] > today].copy()
        future_rows['delivery_date'] = pd.to_datetime(future_rows['delivery_date'])
        fkimg_counts = future_pullout['FKIMG'].value_counts()
        unique_fkimgs = future_pullout[future_pullout['FKIMG'].isin(fkimg_counts[fkimg_counts == 1].index)]
        fkimgs = unique_fkimgs['FKIMG'].tolist()
        future_pullout = future_pullout.drop_duplicates(
            subset=['buyer_article_no', 'con_date'], keep='first')
        con_dates = future_pullout['con_date'].tolist()
        row_index = 0
        for i, con_date in enumerate(con_dates):
            if i == 0:
                git_qty = int(total_fkimg)
            elif i <= len(fkimgs):
                git_qty = int(fkimgs[i-1])
            else:
                git_qty = 0
            next_git_qty = git_qty - fkimgs[i] if i < len(fkimgs) else git_qty
            next_git_date = con_dates[i] if i < len(con_dates) else con_dates[i]
            print( git_qty ,next_git_qty, next_git_date)
            while row_index < len(future_rows):
                row = future_rows.iloc[row_index]
                if row['delivery_date'] < con_date:
                    try:
                        rec = supplyon_bmw.objects.get(pk=row['id'])
                        rec.git_qty = git_qty
                        rec.next_git_wh_qty = int(next_git_qty)
                        rec.next_git_wh_date = next_git_date
                        update_records.append(rec)
                    except supplyon_bmw.DoesNotExist:
                        pass
                    row_index += 1
                else:
                    break
    if update_records:
        with transaction.atomic():
            supplyon_bmw.objects.bulk_update(
                update_records,
                ["git_qty", "next_git_wh_qty", "next_git_wh_date"]
            )
        print(f"âœ… Updated {len(update_records)} records successfully.")
compute_git()
