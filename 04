def compute():
    today = pd.to_datetime(datetime.today().date())
    data = {"IT_PULLOUT": []}
    supplyon, pullout = call_data(supplyon_bmw, data)

    # Clean and prepare data
    supplyon['delivery_date'] = pd.to_datetime(supplyon['delivery_date'].replace('Backorder', pd.NaT), errors='coerce')
    supplyon = supplyon.dropna(subset=['delivery_date'])
    supplyon['delivery_quantity'] = pd.to_numeric(supplyon['delivery_quantity'], errors='coerce').fillna(0)
    pullout['con_date'] = pd.to_datetime(pullout['con_date'], errors='coerce')
    pullout['FKIMG'] = pd.to_numeric(pullout['FKIMG'], errors='coerce').fillna(0)

    # Mark past con_dates as received
    pullout.loc[
        (pullout['con_date'].notna()) & (pullout['con_date'] < today) & (pullout['RECEP_FLG'] != 'X'),
        'RECEP_FLG'
    ] = 'X'

    # Sum received FKIMG by article
    blg_df = pullout[pullout['RECEP_FLG'] == 'X'].groupby('buyer_article_no', as_index=False)['FKIMG'].sum()
    blg_df = blg_df.rename(columns={'FKIMG': 'total_blg'})
    supplyon_sorted = supplyon.sort_values(['buyer_article_no', 'delivery_date'])
    update_records = []

    for article, group in supplyon_sorted.groupby('buyer_article_no', sort=False):
        group = group.sort_values('delivery_date')
        stock_row = blg_df.loc[blg_df['buyer_article_no'] == article, 'total_blg']
        stock_val = int(stock_row.iloc[0]) if not stock_row.empty else 0

        future_pullout = pullout[
            (pullout['buyer_article_no'] == article) &
            (pullout['RECEP_FLG'] != 'X') &
            (pullout['con_date'] > today)
        ].sort_values('con_date')

        future_pullout = future_pullout.drop_duplicates(subset=['buyer_article_no', 'con_date'], keep='first')
        fkimgs = future_pullout['FKIMG'].tolist()
        con_dates = future_pullout['con_date'].tolist()

        future_rows = group[group['delivery_date'] >= today].copy()
        future_rows['delivery_date'] = pd.to_datetime(future_rows['delivery_date'])
        future_rows = future_rows.sort_values('delivery_date')

        previous_stock_val = stock_val
        row_index = 0
        con_idx = 0
        con_added = False
        first_set = False

        while row_index < len(future_rows):
            row = future_rows.iloc[row_index]
            rec = supplyon_bmw.objects.get(pk=row['id'])

            # Check if this is the first row in the current month
            if not first_set:
                rec.blg_warehouse_stock = stock_val if stock_val > 0 else None
                first_set = True
            else:
                # If current row crosses to the next con_date batch
                if con_idx < len(con_dates) and row['delivery_date'] > con_dates[con_idx]:
                    con_idx += 1
                    con_added = False

                # Add next_git_qty only once when crossing to a new con_date
                if con_idx < len(fkimgs) and not con_added:
                    previous_stock_val += fkimgs[con_idx - 1] - fkimgs[con_idx]
                    con_added = True

                rec.blg_warehouse_stock = previous_stock_val if previous_stock_val > 0 else None

            # Set git fields
            rec.git_qty = fkimgs[con_idx - 1] if con_idx > 0 else sum(fkimgs)
            rec.next_git_wh_qty = (fkimgs[con_idx - 1] - fkimgs[con_idx]) if con_idx < len(fkimgs) else 0
            rec.next_git_wh_date = con_dates[con_idx] if con_idx < len(con_dates) else pd.NaT

            # Set warehouse_stock
            latest = bmw_warehouse.objects.filter(buyer_article_no=article).order_by('-entry_date').first()
            rec.warehouse_stock = int(latest.warehouse_qty) if latest else 0

            # Subtract delivery_quantity every row
            previous_stock_val -= row['delivery_quantity']
            update_records.append(rec)
            row_index += 1

    if update_records:
        with transaction.atomic():
            supplyon_bmw.objects.bulk_update(
                update_records,
                ["blg_warehouse_stock", "git_qty", "next_git_wh_qty", "next_git_wh_date", "warehouse_stock"]
            )
        print(f"âœ… Updated {len(update_records)} records successfully.")
